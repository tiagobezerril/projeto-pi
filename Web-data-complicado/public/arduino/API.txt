-- index

<!doctype html>
<html>

<head>
    <title>Graphics</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body>

    <h1>Graphics</h1>
    <div style="display: flex;">
        <div style="width: 50%;">
            <canvas id="sensorAnalogico"></canvas>
        </div>
        <div style="width: 50%;">
            <canvas id="sensorDigital"></canvas>
        </div>
    </div>

    <script>
        var sensorAnalogico = new Chart(document.getElementById('sensorAnalogico').getContext('2d'), {
            type: 'line',
            data: {
                datasets: [{
                    label: 'Analogico',
                    borderColor: '#63B1BC',
                    backgroundColor: '#ED145B'
                }]
            },
            options: {
                scales: {
                    x: {
                        beginAtZero: true
                    },
                    y: {
                        title: {
                            display: true,
                            text: '(%)'
                        },
                        beginAtZero: true,
                    },
                },
            }
        });

        // var sensorDigital = new Chart(document.getElementById('sensorDigital').getContext('2d'), {
        //     type: 'line',
        //     data: {
        //         datasets: [{
        //             label: 'Digital',
        //             borderColor: '#63B1BC',
        //             backgroundColor: '#0762C8'
        //         }]
        //     },
        //     options: {
        //         scales: {
        //             x: {
        //                 beginAtZero: true
        //             },
        //             y: {
        //                 title: {
        //                     display: true,
        //                     text: '(0-1)'
        //                 },
        //                 beginAtZero: true
        //             }
        //         }
        //     }
        // });

        var paginacao = {};
        var tempo = {};

        function obterDados(grafico, endpoint) {
            fetch('http://localhost:3300/sensores/' + endpoint)
                .then(response => response.json())
                .then(valores => {
                    if (paginacao[endpoint] == null) {
                        paginacao[endpoint] = 0;
                    }
                    if (tempo[endpoint] == null) {
                        tempo[endpoint] = 0;
                    }

                    var ultimaPaginacao = paginacao[endpoint];
                    paginacao[endpoint] = valores.length;
                    valores = valores.slice(ultimaPaginacao);

                    valores.forEach((valor) => {
                        if (grafico.data.labels.length == 10 && grafico.data.datasets[0].data.length == 10) {
                            grafico.data.labels.shift();
                            grafico.data.datasets[0].data.shift();
                        }

                        grafico.data.labels.push(tempo[endpoint]++);
                        grafico.data.datasets[0].data.push(parseFloat(valor));
                        grafico.update();
                    });
                })
                .catch(error => console.error('Erro ao obter dados:', error));
        }

        setInterval(() => {
            obterDados(sensorAnalogico, 'analogico');
            // obterDados(sensorDigital, 'digital');
        }, 1000);

    </script>
</body>

</html>

-- main.js

// importa os bibliotecas necessários
const serialport = require('serialport');
const express = require('express');
const mysql = require('mysql2');

// constantes para configurações
const SERIAL_BAUD_RATE = 9600;
const SERVIDOR_PORTA = 3300;

// habilita ou desabilita a inserção de dados no banco de dados
const HABILITAR_OPERACAO_INSERIR = true;

// função para comunicação serial
const serial = async (
    valoresSensorAnalogico
    // valoresSensorDigital,
) => {

    // conexão com o banco de dados MySQL
    let poolBancoDados = mysql.createPool(
        {
            host: 'HOST_DO_BANCO',
            user: 'USUARIO_DO_BANCO',
            password: 'SENHA_DO_BANCO',
            database: 'DATABASE_DO_BANCO',
            port: 3306
        }
    ).promise();

    // lista as portas seriais disponíveis e procura pelo Arduino
    const portas = await serialport.SerialPort.list();
    const portaArduino = portas.find((porta) => porta.vendorId == 2341 && porta.productId == 43);
    if (!portaArduino) {
        throw new Error('O arduino não foi encontrado em nenhuma porta serial');
    }

    // configura a porta serial com o baud rate especificado
    const arduino = new serialport.SerialPort(
        {
            path: portaArduino.path,
            baudRate: SERIAL_BAUD_RATE
        }
    );

    // evento quando a porta serial é aberta
    arduino.on('open', () => {
        console.log(`A leitura do arduino foi iniciada na porta ${portaArduino.path} utilizando Baud Rate de ${SERIAL_BAUD_RATE}`);
    });

    // processa os dados recebidos do Arduino
    arduino.pipe(new serialport.ReadlineParser({ delimiter: '\r\n' })).on('data', async (data) => {
        console.log(data);
        const valores = data.split(';');
        // const sensorDigital = parseInt(valores[0]);
        const sensorAnalogico = parseFloat(valores[0]);

        // armazena os valores dos sensores nos arrays correspondentes
        valoresSensorAnalogico.push(sensorAnalogico);
        // valoresSensorDigital.push(sensorDigital);

        // insere os dados no banco de dados (se habilitado)
        if (HABILITAR_OPERACAO_INSERIR) {

            // este insert irá inserir os dados na tabela "medida"
            await poolBancoDados.execute(
                'INSERT INTO medida (sensor_analogico, sensor_digital) VALUES (?, ?)',
                [sensorAnalogico, sensorDigital]
            );
            console.log("valores inseridos no banco: ", sensorAnalogico + ", " + sensorDigital);

        }

    });

    // evento para lidar com erros na comunicação serial
    arduino.on('error', (mensagem) => {
        console.error(`Erro no arduino (Mensagem: ${mensagem}`)
    });
}

// função para criar e configurar o servidor web
const servidor = (
    valoresSensorAnalogico
    // valoresSensorDigital
) => {
    const app = express();

    // configurações de requisição e resposta
    app.use((request, response, next) => {
        response.header('Access-Control-Allow-Origin', '*');
        response.header('Access-Control-Allow-Headers', 'Origin, Content-Type, Accept');
        next();
    });

    // inicia o servidor na porta especificada
    app.listen(SERVIDOR_PORTA, () => {
        console.log(`API executada com sucesso na porta ${SERVIDOR_PORTA}`);
    });

    // define os endpoints da API para cada tipo de sensor
    app.get('/sensores/analogico', (_, response) => {
        return response.json(valoresSensorAnalogico);
    });
    // app.get('/sensores/digital', (_, response) => {
    //     return response.json(valoresSensorDigital);
    // });
}

// função principal assíncrona para iniciar a comunicação serial e o servidor web
(async () => {
    // arrays para armazenar os valores dos sensores
    const valoresSensorAnalogico = [];
    // const valoresSensorDigital = [];

    // inicia a comunicação serial
    await serial(
        valoresSensorAnalogico
        // valoresSensorDigital
    );

    // inicia o servidor web
    servidor(
        valoresSensorAnalogico
        // valoresSensorDigital
    );
})();